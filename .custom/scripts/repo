#!/usr/bin/env bash

# opens current git repo in Safari
# -m opens the base link of the repo
# -mm opens the homepage to my git account. works while not in repo
# Figure out github repo base URL
#local base_url
base_url=$(git config --get remote.origin.url)
base_url=${base_url%\.git} # remove .git from end of string

if [[ $1 == '-mm' ]]; then
	open "https://github.com/jlehrer1"
	exit 0
fi

# Validate that this folder is a git folder
if ! git branch 2>/dev/null 1>&2 ; then
	echo "Error: Not a git repository"
	exit 0
fi

if [[ $1 == '-m' ]]; then 
	open $base_url
	exit 0
fi

if [[ $1 == '-c' ]]; then
	echo $base_url | pbcopy
	exit 0
fi

# Fix git@github.com: URLs
base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

# Fix git://github.com URLS
base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

# Fix git@bitbucket.org: URLs
base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

# Fix git@gitlab.com: URLs
base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

full_path=$(pwd)
git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

# If filename argument is present, append it
if [ "$1" ]; then
	relative_path="$relative_path/$1"
fi

# Figure out current git branch
# git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

# Remove cruft from branchname
branch=${git_where#refs\/heads\/}

[[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
url="$base_url/$tree/$branch$relative_path"

echo "Calling $(type open) for $url"

open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
