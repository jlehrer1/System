
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
#     ______                     __   _                    	  #
#    / ____/__  __ ____   _____ / /_ (_)____   ____   _____	  #
#   / /_   / / / // __ \ / ___// __// // __ \ / __ \ / ___/	  #
#  / __/  / /_/ // / / // /__ / /_ / // /_/ // / / /(__  ) 	  #
# /_/     \__,_//_/ /_/ \___/ \__//_/ \____//_/ /_//____/  	  #
#                                                         	  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

# Yeah, just little functions I write. Mostly to practice writing bash scripts.
# I find them helpful. Maybe you will too!
# TODO: Move these into their own files, if that is good practice. I'm not sure. Google it. 

# -------------------------------------------------------------
# pushes .zshrc to my Misc git repo
# function zshrcgit() {
#     cd "${HOME}/Documents/Projects/System/zsh"
#     cp "${HOME}/.zshrc" .
#     cp "${HOME}/.zsh_aliases" .
#     cp "${HOME}/.zsh_functions" .
# 	cp "${HOME}/.vimrc" .
# 	git add -A
#     if [ -z "$1" ]; then
#         git commit 
#     else
#         git commit -m "$1"
#     fi
#     git push
#     cd "$OLDPWD"
# }

# Reverts .zsh things to previous head
zshrevert() {
	cd "${HOME}/Documents/Projects/System/zsh"
	cp .zshrc ~
	cp .zsh_functions ~
	cp .zsh_aliases ~
	
	echo "Reverting .zsh things to HEAD..."
}

# might break, copies command output to clipboard
function copy() {
	out=$($1)
	echo $out | pbcopy
}

# For monitoring BTT's stats usage
function bttmonitor() {
	n=$(top -l 1 | grep BetterTouch | cut -d' ' -f1 | awk '{print "-pid"} $0' | xargs)
	eval "top $n"
}

# Checks if CPU has ever been throttled
function throttleinfo() {
	gtimeout .01s pmset -g thermlog
}

# searches recursively in my zsh folder for the given string,
# useful for finding aliases
function zshsearch() {
	grep -r "$@" ~/.oh-my-zsh
}

# searches safari for the given string
# only works with .com, maybe make a more general check, i.e. one word and contains a .
function safari() {
		fin=$(echo $@ | rev | cut -c 1-4 | rev)
		if [[ $@ == *".com"* ]]; then
			open -a Safari "https://www.${@}"
		else
			complete_query_string="https://www.google.com/search?q=" #format: https://www.google.com/search?q=something+to+search+on+Google
			partial_query_string=""
			for i in $@; do
				partial_query_string=$partial_query_string+$i
			done
			partial_query_string=${partial_query_string:1} #useful for delete the first "+" 
			complete_query_string=$complete_query_string$partial_query_string
			open -a Safari $complete_query_string
		fi
}

function repo() {
	# Figure out github repo base URL
	local base_url
	base_url=$(git config --get remote.origin.url)
	base_url=${base_url%\.git} # remove .git from end of string

	if [[ $1 == '-m' ]]; then 
		open $base_url
		return 1
	fi

	# Fix git@github.com: URLs
	base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

	# Fix git://github.com URLS
	base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

	# Fix git@bitbucket.org: URLs
	base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

	# Fix git@gitlab.com: URLs
	base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

	# Validate that this folder is a git folder
	if ! git branch 2>/dev/null 1>&2 ; then
		echo "Not a git repo!"
		exit $?
	fi

	# Find current directory relative to .git parent
	full_path=$(pwd)
	git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
	relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

	# If filename argument is present, append it
	if [ "$1" ]; then
		relative_path="$relative_path/$1"
	fi

	# Figure out current git branch
	# git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
	git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

	# Remove cruft from branchname
	branch=${git_where#refs\/heads\/}

	[[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
	url="$base_url/$tree/$branch$relative_path"


	echo "Calling $(type open) for $url"

	open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

# se for "sEarch Shallow"
# fzf only current folder
function se() {
	command ls -lah | fzf 
}

# sd means "Search Deep"
# i.e. fzf looks for hidden files
function sd {	
	find . | fzf | pbcopy
}

# shows currently installed packages that are not saved to brew_packages.txt
function brewdiff() {
	diff <(cat ~/Documents/Projects/System/packages/brew_packages.txt) <(brew leaves) | sed -n -e '/>/p' | awk '{print $2}'
}

# appends brew packages that are installed but not on the brew_packages.txt list 
# DOESN'T WORK
function brewsave() {
	diff=$(diff <(cat ~/Documents/Projects/System/packages/brew_packages.txt | sort) <(brew leaves | sort) | sed -n -e '/>/p' | awk '{print $2}')
	echo "$diff" >> ~/Documents/Projects/System/packages/brew_packages.txt
}

# more efficient procrastinating lol
# ---------------------------------
function reddit() {	open -a Safari "https://www.reddit.com" }

function facebook() { open -a Safari "https://www.facebook.com" }

function nyt() { open -a Safari "https://www.nytimes.com" }

function matlab() { open -a "Matlab" "$@" }

function slack() { open -a Slack } 

function discord() { open -a Discord }

function minecraft() { open -a Minecraft } 

function pref() { open -a "System Preferences" }


